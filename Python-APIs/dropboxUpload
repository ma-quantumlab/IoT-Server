#! /usr/bin/python

from datetime import datetime, timedelta
from dotenv import load_dotenv
import requests
import argparse
import dropbox
import time
import os

load_dotenv()

access_token = requests.post(
    "https://api.dropbox.com/oauth2/token",
    data={
        "grant_type": "refresh_token",
        "refresh_token": os.getenv("REFRESH_TOKEN"),
        "client_id": os.getenv("APP_KEY"),
        "client_secret": os.getenv("APP_SECRET"),
    }
).json()["access_token"]

SLACK_WEBHOOK_URL = os.getenv("SLACK_WEBHOOK_URL")

def send_slack_message(message):
    payload = {"text": message}
    response = requests.post(SLACK_WEBHOOK_URL, json=payload)
    if response.status_code != 200:
        print(f"Failed to send Slack message: {response.text}")

dbx = dropbox.Dropbox(access_token)

def upload_file_with_retries(local_file_path, dropbox_file_path, retries=3):
    attempt = 0
    while attempt < retries:
        try:
            with open(local_file_path, "rb") as f:
                print(f"Uploading {local_file_path} to {dropbox_file_path}... (Attempt {attempt + 1})")
                dbx.files_upload(f.read(), dropbox_file_path, mode=dropbox.files.WriteMode.overwrite)
            print(f"Successfully uploaded {local_file_path}")
            return
        except requests.exceptions.ReadTimeout:
            attempt += 1
            print(f"ReadTimeout occurred for {local_file_path}. Retrying... ({attempt}/{retries})")
            time.sleep(2) 
        except Exception as e:
            print(f"Error uploading {local_file_path}: {e}")
            raise
    raise Exception(f"Failed to upload {local_file_path} after {retries} attempts.")

def upload_folder_to_dropbox(local_folder, dropbox_path):
    for root, dirs, files in os.walk(local_folder):
        for file in files:
            local_file_path = os.path.join(root, file)
            relative_path = os.path.relpath(local_file_path, local_folder)
            dropbox_file_path = os.path.join(dropbox_path, relative_path).replace("\\", "/")
            
            try:
                upload_file_with_retries(local_file_path, dropbox_file_path)
            except Exception as e:
                print(e)
                continue

def find_and_upload_folder(base_path, current_date):
    for folder in os.listdir(base_path):
        folder_path = os.path.join(base_path, folder)
        if os.path.isdir(folder_path) and folder == current_date:
            print(f"Found folder matching current date: {folder_path}")
            dropbox_folder_path = f"/ServerData/{current_date}"
            upload_folder_to_dropbox(folder_path, dropbox_folder_path)
            print("Upload complete.")
            return
    print("No folder matching the current date was found.")
    send_slack_message(f"ERROR: Data absent for {current_date}")

if __name__ == "__main__":
    base_path = os.getenv("DROPBOX_PATH")
    
    parser = argparse.ArgumentParser(description="Upload CSV Data to Dropbox.")
    parser.add_argument("--period", type=str, default="1d")
    parser.add_argument("--day", type=str)
    args = parser.parse_args()  

    current_date = datetime.strptime(args.day, "%Y-%m-%d")
    date = (current_date - timedelta(days=int(args.period[:-1]) - 1)).strftime("%Y-%m-%d")
    if os.path.exists(base_path):
        find_and_upload_folder(base_path, date)
    else:
        print("Error: Base folder path not found.")
