#! /usr/bin/python

import subprocess
import requests
import os

slack_webhook_url = os.getenv("SLACK_WEBHOOK_URL")
disk_threshold_critical = 95
disk_threshold_warning = 75

def send_slack_message(message):
    payload = {"text": message}
    response = requests.post(slack_webhook_url, json=payload)
    if response.status_code != 200:
        print(f"Failed to send Slack message: {response.text}")

def check_disk_usage():
    result = subprocess.run(["df", "-h"], capture_output=True, text=True)
    line = result.stdout.split("\n")[1]
    parts = line.split()
    if len(parts) > 5:
        usage = parts[4]  # The percentage column
        if usage.endswith('%'):
            percent = int(usage[:-1])
            print(f"Disk space currently at: {percent}")
            if percent > disk_threshold_warning:
                truncate_log_files()
            if percent > disk_threshold_critical:
                send_slack_message(f"Disk space CRITICAL: {parts[0]} is at {percent}% capacity.")

def truncate_log_files():
    result = subprocess.run(["sudo", "cd", "/vars/lib"], capture_output=True, text=True)

def check_docker_containers():
    result = subprocess.run(["docker", "ps", "-a", "--format", "{{.Names}} {{.State}} {{.Status}}"], capture_output=True, text=True)
    lines = result.stdout.split("\n")
    for line in lines:
        if line.strip():
            parts = line.split()
            name, state, status = parts[0], parts[1], " ".join(parts[2:])
            print(f"Container: '{name}' is in state '{state}' with status '{status}'.")
            if state.lower() != "running" or "unhealthy" in status.lower():
                send_slack_message(f"Docker ERROR: Container '{name}' is in state '{state}' with status '{status}'.")

if __name__ == "__main__":
    check_disk_usage()
    check_docker_containers()
